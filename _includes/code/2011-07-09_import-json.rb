#!/usr/bin/env ruby
# Script for importing JSON data generated by parse-osm.rb into DB using DataMapper.
require 'rubygems'
require 'bundler/setup'
require 'json'
require 'set'
require 'data_mapper'
require 'dm-migrations'
require 'dm-constraints'

if ARGV.size < 1
  puts "Usage: #{$PROGRAM_NAME} json_file [log_file]"
  exit 1
end
# Load configuration from database.yml and select apropriate entry.
# It is pretty popular things to do, thanks to Rails.
dbconf = YAML.load(File.read "database.yml")["local"]
# We have to initiate DM before models.
DataMapper.setup(:default, dbconf)
DataMapper::Logger.new(ARGV[1], :debug) if ARGV[1]

# Models specifications
class Category
  include DataMapper::Resource
  property :id,         Serial
  property :name, String
  property :parent_id, Integer
end

class Place
  include DataMapper::Resource
  property :id,         Serial
  property :name, String
  property :address_id, Integer
  property :category_id, Integer
  property :lon, Float
  property :lat, Float

  belongs_to :address
  belongs_to :category
end

class Address
  include DataMapper::Resource
  property :id,         Serial
  property :street, String
  property :house_no, String
  property :city, String
  property :country, String
end

class Rating
  include DataMapper::Resource
  property :id,         Serial
  property :place_id, Integer, :index => true
  property :rating, Integer
  property :email, String
  property :review, String
  property :created_at, DateTime

  belongs_to :place
end

class Premium
  include DataMapper::Resource
  property :id,         Serial
  property :place_id, Integer, :index => true
  property :provider, String
  property :hour_open, Integer
  property :hour_close, Integer
end

class Link
  include DataMapper::Resource
  property :id,         Serial
  property :place_id, Integer, :index => true
  property :url, String
end

DataMapper.finalize
# Create and db schema, destroying any old data.
DataMapper.auto_migrate!


class Importer

  # Method returning category and subcategory for each entry.  This is rather
  # dummy & simple logic, just to get anything from the data, but may be used
  # as a starting point for something more real-life.
  def find_category(entry)
    category = %w( aerialway aeroway amenity barrier boundary buoy cuisine highway historic information landuse leisure man_made natural office place power power_source public_transport railway shop sport tourism traffic_light traffic_sign waterway waterway:sign ).find { |cat| entry[cat] }
    return [category, entry[category]] if category
    subcategory = %w(bridge building).find { |scat| entry[scat] }
    return [nil, entry[subcategory]] if subcategory
    return [nil, "other"]
  end

  # Generating semi-random email addresses
  def email
    imie = %w(ala ola kasia basia tomek atomek xyz)
    name = %w(kowalski nowak)
    domain = %w(gmail.com hotmail.com yahoo.com)
    [imie[rand(imie.size)], name[rand(name.size)], '@', domain[rand(domain.size)]].join("")
  end

  # Generating reviews.
  def review
    "Lorem ipsum #{rand(100)}"
  end

  def import path
    categories = Set.new
    props = {:street => "Testowa", :house_no => "12A/7", :city => "Nieistniejace", :country => "Poland"}
    address = Address.first(props) || Address.create(props)
    json = JSON.load(File.read path)
    json.each_with_index do |entry, idx|
      cat, subcat = find_category(entry)
      dbcat = Category.first_or_create(:name => cat) unless cat.nil?
      dbsubcat = Category.first_or_create(:name => subcat, :parent_id => (dbcat.id rescue nil))
      if (entry["addr:street"] || entry["addr:housenumber"])
        address = Address.create(:street => entry["addr:street"], :house_no => entry["addr:housenumber"], :country => "Poland", :city => entry["addr:city"] )
      end
      place = Place.create(:name => entry["name"], :category_id => dbsubcat.id, :lon => entry["lon"], :lat => entry["lat"], :address_id => address.id) 
      rand(5).times do
        rating = Rating.create(:place_id => place.id, :rating => rand(5) + 1, :email => email, :review => review)
      end
      if ['shop', 'tourism', 'leisure'].include? cat
        Premium.create :place_id => place.id, :provider => place.name, :hour_open => 6 + rand(6), :hour_close => 14 + rand(8)
      end
      Link.create(:place_id => place.id, :url => entry["ft_link"]) if (entry["ft_link"])
      Link.create(:place_id => place.id, :url => "wiki:#{entry["wikipedia"]}") if (entry["wikipedia"])
      print "\r#{idx}" if idx % 1000 == 0
      STDOUT.flush
    end
  end
end

Importer.new.import ARGV[0]

